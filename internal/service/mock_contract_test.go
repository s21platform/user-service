// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/s21platform/user-service/internal/model"
	postgres "github.com/s21platform/user-service/internal/repository/postgres"
)

// MockDbRepo is a mock of DbRepo interface.
type MockDbRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDbRepoMockRecorder
}

// MockDbRepoMockRecorder is the mock recorder for MockDbRepo.
type MockDbRepoMockRecorder struct {
	mock *MockDbRepo
}

// NewMockDbRepo creates a new mock instance.
func NewMockDbRepo(ctrl *gomock.Controller) *MockDbRepo {
	mock := &MockDbRepo{ctrl: ctrl}
	mock.recorder = &MockDbRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbRepo) EXPECT() *MockDbRepoMockRecorder {
	return m.recorder
}

// CheckNicknameAvailability mocks base method.
func (m *MockDbRepo) CheckNicknameAvailability(ctx context.Context, nickname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNicknameAvailability", ctx, nickname)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckNicknameAvailability indicates an expected call of CheckNicknameAvailability.
func (mr *MockDbRepoMockRecorder) CheckNicknameAvailability(ctx, nickname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNicknameAvailability", reflect.TypeOf((*MockDbRepo)(nil).CheckNicknameAvailability), ctx, nickname)
}

// CreateUser mocks base method.
func (m *MockDbRepo) CreateUser(ctx context.Context, user_uuid, email, nickname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user_uuid, email, nickname)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDbRepoMockRecorder) CreateUser(ctx, user_uuid, email, nickname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDbRepo)(nil).CreateUser), ctx, user_uuid, email, nickname)
}

// GetLoginByUuid mocks base method.
func (m *MockDbRepo) GetLoginByUuid(ctx context.Context, uuid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginByUuid", ctx, uuid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginByUuid indicates an expected call of GetLoginByUuid.
func (mr *MockDbRepoMockRecorder) GetLoginByUuid(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginByUuid", reflect.TypeOf((*MockDbRepo)(nil).GetLoginByUuid), ctx, uuid)
}

// GetOrSetUserByLogin mocks base method.
func (m *MockDbRepo) GetOrSetUserByLogin(email string) (*postgres.CheckUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrSetUserByLogin", email)
	ret0, _ := ret[0].(*postgres.CheckUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrSetUserByLogin indicates an expected call of GetOrSetUserByLogin.
func (mr *MockDbRepoMockRecorder) GetOrSetUserByLogin(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrSetUserByLogin", reflect.TypeOf((*MockDbRepo)(nil).GetOrSetUserByLogin), email)
}

// GetUserInfoByUUID mocks base method.
func (m *MockDbRepo) GetUserInfoByUUID(ctx context.Context, uuid string) (model.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByUUID", ctx, uuid)
	ret0, _ := ret[0].(model.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByUUID indicates an expected call of GetUserInfoByUUID.
func (mr *MockDbRepoMockRecorder) GetUserInfoByUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByUUID", reflect.TypeOf((*MockDbRepo)(nil).GetUserInfoByUUID), ctx, uuid)
}

// GetUserWithLimit mocks base method.
func (m *MockDbRepo) GetUserWithLimit(uuid, nickname string, limit, offset int64) ([]model.UserWithLimit, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithLimit", uuid, nickname, limit, offset)
	ret0, _ := ret[0].([]model.UserWithLimit)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserWithLimit indicates an expected call of GetUserWithLimit.
func (mr *MockDbRepoMockRecorder) GetUserWithLimit(uuid, nickname, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithLimit", reflect.TypeOf((*MockDbRepo)(nil).GetUserWithLimit), uuid, nickname, limit, offset)
}

// GetUsersByUUID mocks base method.
func (m *MockDbRepo) GetUsersByUUID(uuid string) (model.UserInfoMin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByUUID", uuid)
	ret0, _ := ret[0].(model.UserInfoMin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByUUID indicates an expected call of GetUsersByUUID.
func (mr *MockDbRepoMockRecorder) GetUsersByUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByUUID", reflect.TypeOf((*MockDbRepo)(nil).GetUsersByUUID), uuid)
}

// IsUserExistByUUID mocks base method.
func (m *MockDbRepo) IsUserExistByUUID(uuid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExistByUUID", uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExistByUUID indicates an expected call of IsUserExistByUUID.
func (mr *MockDbRepoMockRecorder) IsUserExistByUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExistByUUID", reflect.TypeOf((*MockDbRepo)(nil).IsUserExistByUUID), uuid)
}

// UpdateProfile mocks base method.
func (m *MockDbRepo) UpdateProfile(ctx context.Context, data model.ProfileData, userUuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, data, userUuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockDbRepoMockRecorder) UpdateProfile(ctx, data, userUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockDbRepo)(nil).UpdateProfile), ctx, data, userUuid)
}

// MockUserFriendsRegisterSrv is a mock of UserFriendsRegisterSrv interface.
type MockUserFriendsRegisterSrv struct {
	ctrl     *gomock.Controller
	recorder *MockUserFriendsRegisterSrvMockRecorder
}

// MockUserFriendsRegisterSrvMockRecorder is the mock recorder for MockUserFriendsRegisterSrv.
type MockUserFriendsRegisterSrvMockRecorder struct {
	mock *MockUserFriendsRegisterSrv
}

// NewMockUserFriendsRegisterSrv creates a new mock instance.
func NewMockUserFriendsRegisterSrv(ctrl *gomock.Controller) *MockUserFriendsRegisterSrv {
	mock := &MockUserFriendsRegisterSrv{ctrl: ctrl}
	mock.recorder = &MockUserFriendsRegisterSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFriendsRegisterSrv) EXPECT() *MockUserFriendsRegisterSrvMockRecorder {
	return m.recorder
}

// ProduceMessage mocks base method.
func (m *MockUserFriendsRegisterSrv) ProduceMessage(ctx context.Context, message, key any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceMessage", ctx, message, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceMessage indicates an expected call of ProduceMessage.
func (mr *MockUserFriendsRegisterSrvMockRecorder) ProduceMessage(ctx, message, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceMessage", reflect.TypeOf((*MockUserFriendsRegisterSrv)(nil).ProduceMessage), ctx, message, key)
}

// MockOptionhubS is a mock of OptionhubS interface.
type MockOptionhubS struct {
	ctrl     *gomock.Controller
	recorder *MockOptionhubSMockRecorder
}

// MockOptionhubSMockRecorder is the mock recorder for MockOptionhubS.
type MockOptionhubSMockRecorder struct {
	mock *MockOptionhubS
}

// NewMockOptionhubS creates a new mock instance.
func NewMockOptionhubS(ctrl *gomock.Controller) *MockOptionhubS {
	mock := &MockOptionhubS{ctrl: ctrl}
	mock.recorder = &MockOptionhubSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptionhubS) EXPECT() *MockOptionhubSMockRecorder {
	return m.recorder
}

// GetOs mocks base method.
func (m *MockOptionhubS) GetOs(ctx context.Context, id *int64) (*model.OS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOs", ctx, id)
	ret0, _ := ret[0].(*model.OS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOs indicates an expected call of GetOs.
func (mr *MockOptionhubSMockRecorder) GetOs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOs", reflect.TypeOf((*MockOptionhubS)(nil).GetOs), ctx, id)
}
